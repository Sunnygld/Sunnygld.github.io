<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JVM内存分配]]></title>
      <url>http://gongly.cn/2016/10/23/JVM%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      <content type="html"><![CDATA[<h2 id="PCR-程序计数器-的了解与机制"><a href="#PCR-程序计数器-的了解与机制" class="headerlink" title="PCR(程序计数器)的了解与机制"></a>PCR(程序计数器)的了解与机制</h2><a id="more"></a>
<p><img src="/img/javaJVM内存非配机制.jpg" alt="javaJVM内存非配机制"></p>
<ul>
<li><p>程序计数器可以看做是当前线程所执行的字节码的行号指示器。在JVM的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p>
</li>
<li><p>由于JVM的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，为了在线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，独立存储，互不影响。所以，程序计数器是<strong>线程私有</strong>的内存区域。</p>
</li>
<li><p>如果线程执行的是一个Java方法，计数器记录的是正在执行的虚拟机字节码指令的地址；<br>如果线程执行的是一个Native方法，计数器的值为空。</p>
</li>
<li><p>Java虚拟机规范中唯一一个没有规定任何OutOfMemoryError情况的区域。(内存溢出)</p>
</li>
</ul>
<p>Q:什么是NATIVE关键字</p>
<p>A:Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此Java使用native方法来扩展Java程序的功能。</p>
<p>　　可以将native方法比作Java程序同C程序的接口，其实现步骤：</p>
<p>　　1、在Java中声明native()方法，然后编译。</p>
<p>　　2、用javah产生一个.h文件。</p>
<p>　　3、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）。</p>
<p>　　4、将第三步的.cpp文件编译成动态链接库文件。</p>
<p>　　5、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。</p>
<p>　　JAVA的native方法适用的情况：</p>
<p>　　1、为了使用底层的主机平台的某个特性，而这个特性不能通过JAVA API访问。</p>
<p>　　2、为了访问一个老的系统或者使用一个已有的库，而这个系统或这个库不是用JAVA编写的。</p>
<p>　　3、为了加快程序的性能，而将一段时间敏感的代码作为本地方法实现。</p>
<p><a href="http://blog.csdn.net/funneies/article/details/8949660" target="_blank" rel="external">NATIVE关键字详细使用</a></p>
<h2 id="JAVA虚拟机栈"><a href="#JAVA虚拟机栈" class="headerlink" title="JAVA虚拟机栈"></a>JAVA虚拟机栈</h2><p><img src="/img/JAVA虚拟机栈.png" alt="JAVA虚拟机栈"></p>
<ul>
<li><p>Java虚拟机栈描述的是Java方法执行的内存模型：每个方法执行的同时会创建一个栈帧，栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p>
</li>
<li><p>Java虚拟机栈是线程私有的，它的生命周期与线程相同。</p>
</li>
<li><p>程序员主要关注的stack栈内存，就是虚拟机栈中局部变量表部分。局部变量表存放了编译时期可知的各种<strong>基本数据类型</strong>和<strong>对象</strong>引用。<br>局部变量表所需的内存空间在编译时期完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>
</li>
<li><p>Java虚拟机规范对这个区域规定了两种异常情况：</p>
<ol>
<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；</li>
<li>如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常；<br>（当前大部分JVM都可以动态扩展，只不过JVM规范也允许固定长度的虚拟机栈）</li>
</ol>
</li>
</ul>
<h2 id="JAVA本地方法栈"><a href="#JAVA本地方法栈" class="headerlink" title="JAVA本地方法栈"></a>JAVA本地方法栈</h2><ul>
<li><p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行Java方法服务（也就是字节码），而本地方法栈为虚拟机使用到的Native方法服务。</p>
</li>
<li><p>Java虚拟机规范对本地方法栈使用的语言、使用方法与数据结构并没有强制规定，因此可以由虚拟机自由实现。例如：HotSpot虚拟机直接将本地方法栈和虚拟机栈合二为一。</p>
</li>
<li><p>同虚拟机栈相同，Java虚拟机规范对这个区域也规定了两种异常情况StackOverflowError 和 OutOfMemoryError异常。</p>
</li>
</ul>
<h2 id="JAVA堆"><a href="#JAVA堆" class="headerlink" title="JAVA堆"></a>JAVA堆</h2><ul>
<li><p>Java堆是被所有的线程共享的一块内存区域，在虚拟机启动时创建。<br>Java堆的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p>
</li>
<li><p>Java堆是垃圾回收器管理的主要区域，因此也被称为”GC堆”。<br>从内存回收的角度看，由于现在收集器基本都采用分代收集算法，所以Java堆可以细分为：新生代、老生代；<br>从内存分配的角度看，线程共享的Java堆可能划分出多个线程私有的分配缓冲区（TLAB）；<br>不论如何划分，都与存放的内容无关，无论哪个区域，存储的仍然是对象实例。</p>
</li>
<li><p>Java虚拟机规范规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现上，既可以是固定大小的，也可以是可扩展的，不过当前主流JVM都是按照可扩展来实现的。</p>
</li>
<li><p>Java虚拟机规范规定，如果在堆上没有内存完成实例分配，并且堆上也无法再扩展时，将会抛出OutOfMemoryError异常。</p>
</li>
<li><p>内存泄露和内存溢出<br>Java堆内存的OOM异常是非常常见的异常情况，重点是根据内存中的对象是否是必要的，来弄清楚到底是出现了内存泄露(Memory Leak)还是内存溢出(Memory Overflow).</p>
<ol>
<li>内存泄露：指程序中一些对象不会被GC所回收，它始终占用内存，即被分配的对象引用链可达但已无用。（可用内存减少）</li>
<li>内存溢出：程序运行过程中无法申请到足够的内存而导致的一种错误。内存溢出通常发生于OLD段或Perm段垃圾回收后，仍然无内存空间容纳新的Java对象的情况。内存泄露是内存溢出的一种诱因，不是唯一因素。</li>
</ol>
</li>
</ul>
<p>Q:是不是所有的JAVA对象都被分配到了JAVA堆上</p>
<p>A:并不,JAVA也有自己的逃逸算法和TLAB,<a href="http://blog.csdn.net/yangzl2008/article/details/43202969" target="_blank" rel="external">详情</a></p>
<p>Q:什么是GC机制</p>
<p>A:Garbage Collection，垃圾回收</p>
<p>注:</p>
<ol>
<li><p>Java虚拟机的内存管理。大体上分为两部分：垃圾回收算法和内存分配。举个不恰当的比喻，好比汽车的变速箱和发动机。当’转速/内存使用’过高时，就会触发’换挡/垃圾回收’。</p>
</li>
<li><p>Java虚拟机的内存分配，大体上可分为年轻代（Young Generation），老年代（Tenured Generation）以及元空间（Metaspace）。其中，新生代又分为Eden（伊甸园）,S0和S1（Survivor，幸存者乐园）。（参考《Java程序员修炼之道》及VisualVM）</p>
</li>
<li><p>Java 8取消了原来的永久代（PermGen），改为元空间（Metaspace）了。</p>
</li>
</ol>
<h2 id="JAVA方法区"><a href="#JAVA方法区" class="headerlink" title="JAVA方法区"></a>JAVA方法区</h2><ul>
<li><p>方法区也是被所有的线程共享的一块内存区域。它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
</li>
<li><p>Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样 不需要连续的内存和可以选择固定大小或者可扩展之外，还可以选择不实现垃圾回收。<br>这区域的内存回收目标主要是针对常量池的回收和类型的卸载，一般而言，这个区域的内存回收比较难以令人满意，尤其是类型的回收，条件相当苛刻，但是这部分区域的内存回收确实是必要的。</p>
</li>
<li><p>Java虚拟机规范规定，当方法区无法满足内存分配的需求时，将抛出OutOfMemoryError异常。</p>
</li>
<li><p>运行时常量池是方法区的一部分。CLass文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。<br>运行时常量池相对于CLass文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入CLass文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的就是String类的intern()方法。</p>
</li>
<li><p>String.intern()是一个Native方法，它的作用是：如果字符串常量池中已经包含了一个等于此String对象的字符串，则返回代表池中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中，并且返回此字符串的引用。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line"> String str1 = <span class="keyword">new</span> StringBuilder(<span class="string">"计算机"</span>).append(<span class="string">"软件"</span>).toString();</div><div class="line"> System.out.println(str1.intern() == str1);</div><div class="line"></div><div class="line"> String str2 = <span class="keyword">new</span> StringBuilder(<span class="string">"ja"</span>).append(<span class="string">"va"</span>).toString();</div><div class="line"> System.out.println(str2.intern() == str2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注:这段代码在JDK1.6中运行，会得到两个false，而在JDK1.7中运行，会得到一个true和一个false。</p>
<p>原因是：</p>
<ul>
<li>在JDK1.6中intern()方法会把首次遇到的字符串实例复制到永久代中，返回的也是永久代中这个字符串实例的引用，而由StringBuilder创建的字符串实例在Java堆上，所以必然不是一个引用。<br>在JDK1.7中intern()方法不会复制实例，只是在常量池中记录首次出现的实例引用，因此intern()返回的引用和由StringBuilder创建的字符串实例是同一个。</li>
<li>str2返回false是因为Java这个字符串在执行StringBuilder(“ja”).append(“va”).toString()之前已经出现过，字符串常量池中已经有它的引用了，不符合首次出现的原则，而”计算机软件”这个字符串是首次出现的。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java位运算]]></title>
      <url>http://gongly.cn/2016/10/23/java%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>留作备忘</p>
<a id="more"></a>
<p><a href="https://zhidao.baidu.com/question/354545410.html?skiptype=2" target="_blank" rel="external">移位运算</a></p>
<p><a href="http://blog.csdn.net/vebasan/article/details/6193916" target="_blank" rel="external">逻辑运算</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法和数据结构的关系]]></title>
      <url>http://gongly.cn/2016/10/23/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>一位数据痴迷者的介绍</p>
<a id="more"></a>
<p><a href="https://zhidao.baidu.com/question/1945941327167439628.html?skiptype=2" target="_blank" rel="external">原文连接</a></p>
<p>本人乃一个数据痴迷者,在计算机的道路上,也是一个数据结构的痴迷者,现在大学里面和同学搞开发也痴迷于数据库,我就我个人的理解给你谈一谈:<br>首先,数据结构是一门计算机语言学的基础学科，它不属于任何一门语言，其体现的是几乎所有标准语言的算法的思想。</p>
<p>上面的概念有一些模糊，我们现在来具体说一说，相信你门的数据结构使用的是一门具体的语言比如C/C++语言来说明，那是为了辅助的学习数据结构，而数据结构本身不属于任何语言（相信你把书上的程序敲到电脑里面是不能通过的吧，其只是描述了过程，要调试程序，还需要修改和增加一些东西）。你们的书上开始应该在讲究数据的物理存储结构/逻辑存储结构等概念，说明数据结构首先就是“数据的结构”，在内存上的存储方式，就是物理的存储结构，在程序使用人员的思想上它是逻辑的，比如：<br>你们在C/C++中学习到链表，那么链表是什么一个概念，你们使用指针制向下一个结点的首地址，让他们串联起来，形成一个接一个的结点，就像显示生活中的火车一样。而这只是对于程序员的概念，但是在内存中存储的方式是怎样的那？对于你程序员来说这是“透明”的，其内部分配空间在那里，都是随机的，而内存中也没有一个又一根的线将他们串联起来，所以，这是一个物理与逻辑的概念，对于我们程序员只需要知道这些就可以了，而我们主要要研究的是“逻辑结构”。</p>
<p>我可以给你一个我自己总结的一个概念：所有的算法必须基于数据结构生存。也就是说，我们对于任何算法的编写，必须依赖一个已经存在的数据结构来对它进行操作，数据结构成为算法的操作对象，这也是为什么算法和数据结构两门分类不分家的概念，算法在没有数据结构的情况下，没有任何存在的意义；而数据结构没有算法就等于是一个尸体而没有灵魂。</p>
<p>估计这个对于算法的初学者可能有点晕，我们在具体的说一些东西吧：<br>我们在数据结构中最简单的是什么：我个人把书籍中线性表更加细化一层（这里是为了便于理解在这样说的）：单个元素，比如：int i;这个i就是一个数据结构，它是一个什么样的数据结构，就是一个类型为int的变量，我们可以对它进行加法/减法/乘法/除法/自加等等一系列操作，当然对于单个元素我们对它的数据结构和算法的研究没有什么意义，因为它本来就是原子的，某些具体运算上可能算法存在比较小的差异；而提升一个层次：就是我们的线性表（一般包含有：顺序表/链表）那么我们研究这样两种数据结构主要就是要研究它的什么东西那？一般我们主要研究他们以结构为单位（就是结点）的增加/删除/修改/检索（查询）四个操作（为什么有这样的操作，我在下面说到），我们一般把“增加/删除/修改”都把它称为更新，对于一个结点，若要进行更新一类的操作比如：删除，对于顺序表来说是使用下标访问方式，那么我们在删除了一个元素后需要将这个元素后的所有元素后的所有元素全部向前移动，这个时间是对于越长的顺序表，时间越长的，而对于链表，没有顺序的概念，其删除元素只需要将前一个结点的指针指向被删除点的下一个结点，将空间使用free()函数进行释放，还原给操作系统。当执行检索操作的时候，由于顺序表直接使用下标进行随机访问，而链表需要从头开始访问一一匹配才可以得到使用的元素，这个时间也是和链表的结点个数成正比的。所以我们每一种数据结构对于不同的算法会产生不同的效果，各自没有绝对的好，也没有绝对的不好，他们都有自己的应用价值和方式；这样我们就可以在实际的项目开发中，对于内部的算法时间和空间以及项目所能提供的硬件能力进行综合评估，以让自己的算法能够更加好。（在这里只提到了基于数据结构的一个方面就是：速度，其实算法的要素还应该包括：稳定性、健壮性、正确性、有穷性、可理解性、有输入和输出等等）</p>
<p>为什么要以结点方式进行这些乱七八糟的操作那？首先明确一个概念就是：对于过程化程序设计语言所提供的都是一些基础第一信息，比如一些关键字/保留字/运算符/分界符。而我们需要用程序解决现实生活中的问题，比如我们要程序记录某公司人员的情况变化，那么人员这个数据类型，在程序设计语言中是没有的，那么我们需要对人员的内部信息定义（不可能完全，只是我们需要那些就定义那些），比如：年龄/性别/姓名/出生日期/民族/工作单位/职称/职务/工资状态等，那么就可以用一些C/C++语言描述了，如年龄我们就可以进行如下定义:<br>int age;/<em>age变量，表示人员公司人员的年龄</em>/<br>同理进行其他的定义，我们用结构体或类把他们封装成自定义数据类型或类的形式，这样用他们定义的就是一个人的对象的了，它内部包含了很多的模板数据了。</p>
<p>我就我个人的经历估计的代码量应该10000以内的（我个人的经理：只是建议，从你的第一行代码开始算，不论程序正确与否，不论那一门语言，作为一个标准程序员需要十万行的代码的功底（这个是我在大学二年级感觉有一定时候的大致数据，不一定适合其他人），而十万行代码功底一般需要四门基础远支撑，若老师没有教，可以自学一些语言）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法总结]]></title>
      <url>http://gongly.cn/2016/10/23/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;留作参考</p>
<a id="more"></a>
<p><a href="http://blog.csdn.net/bendanban/article/details/44159903" target="_blank" rel="external">基本语法1</a></p>
<ul>
<li>使用标题</li>
<li>加粗、斜体</li>
<li>分割线</li>
<li>列表</li>
<li>引用</li>
</ul>
<p><a href="http://blog.csdn.net/bendanban/article/details/44179247" target="_blank" rel="external">基本语法2</a></p>
<ul>
<li>插入图片</li>
<li>代码</li>
<li>表格</li>
<li>超链接</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java线程总结]]></title>
      <url>http://gongly.cn/2016/09/25/JAVAThread/</url>
      <content type="html"><![CDATA[<h2 id="创建线程的两种方法"><a href="#创建线程的两种方法" class="headerlink" title="创建线程的两种方法"></a>创建线程的两种方法</h2><h3 id="通过实现Runnable接口线程创建"><a href="#通过实现Runnable接口线程创建" class="headerlink" title="通过实现Runnable接口线程创建"></a>通过实现Runnable接口线程创建</h3><ol>
<li>定义一个类实现Runnable接口，重写接口中的run()方法。在run()方法中加入具体的任务代码或处理逻辑。</li>
<li>创建Runnable接口实现类的对象。</li>
<li>创建一个Thread类的对象，需要封装前面Runnable接口实现类的对象。（接口可以实现多继承）</li>
<li>调用Thread对象的start()方法，启动线程<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreadDemo1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">10</span>;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="comment">// 在run方法中定义任务  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">while</span> (countDown-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">            System.out.println(<span class="string">"#"</span> + Thread.currentThread().getName() + <span class="string">"("</span>  </div><div class="line">                    + countDown + <span class="string">")"</span>);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        <span class="comment">// Runnable中run方法是一个空方法，并不会产生任何线程行为，必须显式地将一个任务附着到线程上  </span></div><div class="line">        TreadDemo1 tt=<span class="keyword">new</span> TreadDemo1();  </div><div class="line">        <span class="keyword">new</span> Thread(tt).start();  </div><div class="line">        <span class="keyword">new</span> Thread(tt).start();  </div><div class="line">        System.out.println(<span class="string">"火箭发射前倒计时："</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>运行结果：<br>火箭发射前倒计时：<br>Thread-1(8)<br><br>Thread-1(7)<br><br>Thread-1(6)<br><br>Thread-1(5)<br><br>Thread-1(4)<br><br>Thread-1(3)<br><br>Thread-1(2)<br><br>Thread-1(1)<br><br>Thread-1(0)<br><br>Thread-0(9)<br></p>
<h3 id="通过继承Thread类创建线程"><a href="#通过继承Thread类创建线程" class="headerlink" title="通过继承Thread类创建线程"></a>通过继承Thread类创建线程</h3><ol>
<li>首先定义一个类去继承Thread父类，重写父类中的run()方法。在run()方法中加入具体的任务代码或处理逻辑。</li>
<li>直接创建一个ThreadDemo2类的对象，也可以利用多态性，变量声明为父类的类型。</li>
<li>调用start方法，线程t启动，隐含的调用run()方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> countDown = <span class="number">10</span>;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="comment">// 在run方法中定义任务  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">while</span> (countDown-- &gt; <span class="number">0</span>) &#123;  </div><div class="line">            System.out.println(<span class="string">"#"</span> + <span class="keyword">this</span>.getName() + <span class="string">"("</span> + countDown + <span class="string">")"</span>);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        <span class="keyword">new</span> ThreadDemo2().start();  </div><div class="line">        <span class="keyword">new</span> ThreadDemo2().start();  </div><div class="line">        <span class="comment">// 由于start方法迅速返回，所以main线程可以执行其他的操作,此时有两个独立的线程在并发运行  </span></div><div class="line">        System.out.println(<span class="string">"火箭发射前倒计时："</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><br>Thread-0(9)<br><br>Thread-0(8)<br><br>Thread-0(7)<br><br>Thread-0(6)<br><br>Thread-0(5)<br><br>Thread-0(4)<br><br>Thread-0(3)<br><br>Thread-0(2)<br><br>Thread-0(1)<br><br>Thread-0(0)<br>火箭发射前倒计时：<br><br>Thread-1(9)<br><br>Thread-1(8)<br><br>Thread-1(7)<br><br>Thread-1(6)<br><br>Thread-1(5)<br><br>Thread-1(4)<br><br>Thread-1(3)<br><br>Thread-1(2)<br><br>Thread-1(1)<br><br>Thread-1(0)</p>
<h3 id="两种方式的比较"><a href="#两种方式的比较" class="headerlink" title="两种方式的比较"></a>两种方式的比较</h3><p>首先分析两种方式的输出结果，同样是创建了两个线程，为什么结果不一样呢？<br><br>使用实现Runnable接口方式创建线程可以共享同一个目标对象（TreadDemo1 tt=new TreadDemo1();），实现了多个相同线程处理同一份资源。<br><br><br>然后再看一段来自JDK的解释：<br><br>Runnable 接口应该由那些打算通过某一线程执行其实例的类来实现。类必须定义一个称为run 的无参数方法。<br>设计该接口的目的是为希望在活动时执行代码的对象提供一个公共协议。例如，Thread 类实现了Runnable。激活的意思是说某个线程已启动并且尚未停止。<br><br><br>此外，Runnable 为非 Thread 子类的类提供了一种激活方式。通过实例化某个Thread 实例并将自身作为运行目标，就可以运行实现 Runnable 的类而无需创建 Thread 的子类。大多数情况下，如果只想重写run() 方法，而不重写其他 Thread 方法，那么应使用 Runnable 接口。这很重要，因为除非程序员打算修改或增强类的基本行为，否则不应为该类创建子类。</p>
<p>采用继承Thread类方式：<br><br>（1）优点：编写简单，如果需要访问当前线程，无需使用Thread.currentThread()方法，直接使用this，即可获得当前线程。<br><br>（2）缺点：因为线程类已经继承了Thread类，所以不能再继承其他的父类。<br>采用实现Runnable接口方式：<br><br>（1）优点：线程类只是实现了Runable接口，还可以继承其他的类。在这种方式下，可以多个线程共享同一个目标对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU代码和数据分开，形成清晰的模型，较好地体现了面向对象的思想。<br><br>（2）缺点：编程稍微复杂，如果需要访问当前线程，必须使用Thread.currentThread()方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse的常用快捷键【备忘】]]></title>
      <url>http://gongly.cn/2016/09/24/eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>Ctrl+K 光标放在一个变量上(注意,是变量,如果你的光标放在了字符串上,则没有任何作用的),按下Ctrl+K光标会定位到下一个相同的变量<br><br>Shift+Ctrl+K 跟Ctrl+K功能一样,方向相反<br><br>Ctrl+O 打开类似大纲视图的小窗口<br><br>Alt+ 左右方向键,跳到前一次/后一次的编辑位置<br><br>双击左括号(小括号,中括号,大括号),将选择括号内的所有内容<br><br>F3打开声明该引用的文件1</p>
<a id="more"></a>
<p><br>F4打开类型层次结构<br><br>Ctrl+H打开搜索窗口<br><br>Shift+Ctrl+S保存全部<br><br>Shift+Ctrl+R打开资源<br><br>Ctrl+Q回到最后一次编辑的地方<br><br>Ctrl+Shift+G在workspace中搜索引用<br><br>Alt+上、下方向键,将选中的行向上或向下移动<br><br>Shift+Enter在当前行的下面添加一个空行,光标可以当前行的任意位置<br><br>Ctrl+L跳转到某行<br><br>Ctrl+M最大化当前的Edit或View,再按则反之<br><br>Ctrl+/注释当前行,再按则反之<br><br>Ctrl+T显示当前类的继承情况(可以查看类的目录树)<br><br>Ctrl+E显示当前Edit的下拉列表<br><br>Ctrl+/(小键盘) 折叠当前类中的所有代码<br><br>Ctrl+*(小键盘) 展开当前类中的所有代码<br><br>Alt+/代码助手,提示代码<br><br>Ctrl+J正向增量查找<br><br>Ctrl+Shift+J反向增量查找<br><br>Ctrl+Shift+F4关闭所有打开的edit<br><br>Ctrl+Shift+R查找文件<br><br>Ctrl+Shift+T查找类<br><br>Alt+Shift+R重名命<br><br>Alt+Shift+M抽取方法<br><br>Alt+Shift+Z取消重构</p>
]]></content>
    </entry>
    
  
  
</search>
